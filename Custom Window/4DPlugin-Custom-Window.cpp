/* --------------------------------------------------------------------------------
 #
 #  4DPlugin-Custom-Window.cpp
 #	source generated by 4D Plugin Wizard
 #	Project : Custom Window
 #	author : miyako
 #	2020/11/30
 #  
 # --------------------------------------------------------------------------------*/

#include "4DPlugin-Custom-Window.h"

#pragma mark -

void PluginMain(PA_long32 selector, PA_PluginParameters params) {
    
	try
	{
        switch(selector)
        {
                // --- Custom Window
                
            case 1 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)SET_WINDOW_TRANSPARENT, params);
                break;
            case 2 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)SET_WINDOW_ALPHA, params);
                break;
            case 3 :
                PA_RunInMainProcess((PA_RunInMainProcessProcPtr)Get_window_alpha, params);
                Get_window_alpha(params);
                break;
                
        }

	}
	catch(...)
	{

	}
}

#pragma mark -

void SET_WINDOW_TRANSPARENT(PA_PluginParameters params) {
    
    //https://www.cocoawithlove.com/2008/12/drawing-custom-window-on-mac-os-x.html
    
    PA_long32 arg1 = PA_GetLongParameter(params, 1);
    
    NSWindow *window = reinterpret_cast<NSWindow *>(PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(arg1)));
    
    if(window) {
        
        [window setBackgroundColor:[NSColor clearColor]];
        [window setOpaque:NO];
        
    }
    
}

void SET_WINDOW_ALPHA(PA_PluginParameters params) {
    
    PA_long32 arg1 = PA_GetLongParameter(params, 1);
    double arg2 = PA_GetDoubleParameter(params, 2);
    double arg3 = PA_GetDoubleParameter(params, 3);
    
    const double alpha = arg2 <= 1 ? arg2 >= 0 ? arg2 : 0 : 1;
    const double duration = arg3 <= 9 ? arg3 >= 0 ? arg3 : 0 : 9;
    
    NSWindow *window = reinterpret_cast<NSWindow *>(PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(arg1)));
    
    if(window) {
        
        [NSAnimationContext beginGrouping];
        [[NSAnimationContext currentContext] setDuration:duration];
        [[window animator] setAlphaValue:alpha];
        [NSAnimationContext endGrouping];
        
    }

}

void Get_window_alpha(PA_PluginParameters params) {
    
    PA_long32 arg1 = PA_GetLongParameter(params, 1);
    
    NSWindow *window = reinterpret_cast<NSWindow *>(PA_GetWindowPtr(reinterpret_cast<PA_WindowRef>(arg1)));
    
    double alpha = 0.0;
    
    if(window) {
        alpha = [window alphaValue];
    }

    PA_ReturnDouble(params, alpha);
}



